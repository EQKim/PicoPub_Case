@page "/items"
@using UseCasePicoP.ClassLibrary
@using UseCasePicoP.Services.Interface
@inject IItemService ItemService
@inject NavigationManager Navigation

<h3>Items</h3>

<div>
    <label for="sort-by">Sort By:</label>
    <select id="sort-by" @bind="SortBy">
        <option value="name">Name</option>
        <option value="price">Price</option>
    </select>

    <label>
        <input type="checkbox" @bind="Ascending" />
        Ascending
    </label>

    <button @onclick="LoadItems">Sort</button>
</div>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (var item in items)
        {
            <li>
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(item.ImageData)}")" alt="@item.Name" />
                <div class="item-details">
                    <span><strong>@item.Name</strong></span>
                    <p>@item.Description</p>
                    <p>Price: @item.Price.ToString("N2") DKK</p>
                </div>
                <div class="item-actions">
                    <button class="btn btn-secondary" @onclick="() => EditItem(item.Id)">Edit</button>
                    <button class="btn btn-secondary" @onclick="() => DeleteItem(item.Id)">Delete</button>
                </div>
            </li>
        }
    </ul>
}

<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
    <span>Page @CurrentPage</span>
    <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
</div>

@code {
    private List<Item> items;
    private string SortBy { get; set; } = "name";
    private bool Ascending { get; set; } = true;
    private int CurrentPage { get; set; } = 1;
    private const int PageSize = 10;
    private int TotalItemsCount { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < (TotalItemsCount / PageSize) + (TotalItemsCount % PageSize > 0 ? 1 : 0);

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        TotalItemsCount = await ItemService.GetTotalItemsCountAsync();
        items = await ItemService.GetItemsAsync(CurrentPage, PageSize, SortBy, Ascending);
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadItems();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadItems();
        }
    }

    private async Task DeleteItem(string id)
    {
        await ItemService.DeleteItemAsync(id);
        await LoadItems();
    }
    
    private void EditItem(string id)
    {
        Navigation.NavigateTo($"/edit-item/{id}");
    }
}
